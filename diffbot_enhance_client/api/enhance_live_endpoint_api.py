# coding: utf-8

"""
    Diffbot Enhance Service

    Enhance is an API to find a person or organization in the Knowledge Graph using partial data  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Contact: support@diffbot.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from diffbot_enhance_client.api_client import ApiClient
from diffbot_enhance_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class EnhanceLiveEndpointApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def enhance(self, **kwargs):  # noqa: E501
        """Live Enhance Endpoint  # noqa: E501

        Enhance endpoint to find person or organization using partial data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enhance(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Diffbot Token
        :param str type: Diffbot entity type
        :param str id: DiffbotId of entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str name: Name of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str url: Origin or homepage URI of entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str phone: Phone of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str email: Email of the entity to enhance. Parameter can be used only with type `Person`
        :param str description: Description of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str employer: Employer of the entity to enhance. Parameter can be used only with type `Person`
        :param str title: Title of the entity to enhance. Parameter can be used only with type `Person`
        :param str school: School of the entity to enhance. Parameter can be used only with type `Person`
        :param str location: Location of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str mode: `mode=refresh` indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data.
        :param str non_canonical_facts: `nonCanonicalFacts=true` returns non-canonical facts.
        :param str jsonmode: `jsonmode=extended` returns origin information for facts.
        :param str rocket_reach_token: rocketReach token
        :param str x_diffbot_request_id: Request UUID for tracking. If available, will be set on response.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EnhanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.enhance_with_http_info(**kwargs)  # noqa: E501

    def enhance_with_http_info(self, **kwargs):  # noqa: E501
        """Live Enhance Endpoint  # noqa: E501

        Enhance endpoint to find person or organization using partial data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enhance_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Diffbot Token
        :param str type: Diffbot entity type
        :param str id: DiffbotId of entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str name: Name of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str url: Origin or homepage URI of entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str phone: Phone of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str email: Email of the entity to enhance. Parameter can be used only with type `Person`
        :param str description: Description of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str employer: Employer of the entity to enhance. Parameter can be used only with type `Person`
        :param str title: Title of the entity to enhance. Parameter can be used only with type `Person`
        :param str school: School of the entity to enhance. Parameter can be used only with type `Person`
        :param str location: Location of the entity to enhance. Parameter can be used with types `Person` and `Organization`
        :param str mode: `mode=refresh` indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data.
        :param str non_canonical_facts: `nonCanonicalFacts=true` returns non-canonical facts.
        :param str jsonmode: `jsonmode=extended` returns origin information for facts.
        :param str rocket_reach_token: rocketReach token
        :param str x_diffbot_request_id: Request UUID for tracking. If available, will be set on response.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EnhanceResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['token', 'type', 'id', 'name', 'url', 'phone', 'email', 'description', 'employer', 'title', 'school', 'location', 'mode', 'non_canonical_facts', 'jsonmode', 'rocket_reach_token', 'x_diffbot_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enhance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'phone' in local_var_params and local_var_params['phone'] is not None:  # noqa: E501
            query_params.append(('phone', local_var_params['phone']))  # noqa: E501
        if 'email' in local_var_params and local_var_params['email'] is not None:  # noqa: E501
            query_params.append(('email', local_var_params['email']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'employer' in local_var_params and local_var_params['employer'] is not None:  # noqa: E501
            query_params.append(('employer', local_var_params['employer']))  # noqa: E501
        if 'title' in local_var_params and local_var_params['title'] is not None:  # noqa: E501
            query_params.append(('title', local_var_params['title']))  # noqa: E501
        if 'school' in local_var_params and local_var_params['school'] is not None:  # noqa: E501
            query_params.append(('school', local_var_params['school']))  # noqa: E501
        if 'location' in local_var_params and local_var_params['location'] is not None:  # noqa: E501
            query_params.append(('location', local_var_params['location']))  # noqa: E501
        if 'mode' in local_var_params and local_var_params['mode'] is not None:  # noqa: E501
            query_params.append(('mode', local_var_params['mode']))  # noqa: E501
        if 'non_canonical_facts' in local_var_params and local_var_params['non_canonical_facts'] is not None:  # noqa: E501
            query_params.append(('nonCanonicalFacts', local_var_params['non_canonical_facts']))  # noqa: E501
        if 'jsonmode' in local_var_params and local_var_params['jsonmode'] is not None:  # noqa: E501
            query_params.append(('jsonmode', local_var_params['jsonmode']))  # noqa: E501
        if 'rocket_reach_token' in local_var_params and local_var_params['rocket_reach_token'] is not None:  # noqa: E501
            query_params.append(('rocketReachToken', local_var_params['rocket_reach_token']))  # noqa: E501

        header_params = {}
        if 'x_diffbot_request_id' in local_var_params:
            header_params['X-Diffbot-RequestId'] = local_var_params['x_diffbot_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kg/enhance_endpoint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnhanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
