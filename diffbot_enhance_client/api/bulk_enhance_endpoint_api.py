# coding: utf-8

"""
    Diffbot Enhance Service

    Enhance is an API to find a person or organization in the Knowledge Graph using partial data  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Contact: support@diffbot.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from diffbot_enhance_client.api_client import ApiClient
from diffbot_enhance_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class BulkEnhanceEndpointApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulkjob_status(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulk Enhance Status Endpoint  # noqa: E501

        Get status of a bulk Enhance job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulkjob_status(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BulkjobStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.bulkjob_status_with_http_info(bulkjob_id, **kwargs)  # noqa: E501

    def bulkjob_status_with_http_info(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulk Enhance Status Endpoint  # noqa: E501

        Get status of a bulk Enhance job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulkjob_status_with_http_info(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BulkjobStatusResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bulkjob_id', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulkjob_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bulkjob_id' is set
        if self.api_client.client_side_validation and ('bulkjob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bulkjob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bulkjob_id` when calling `bulkjob_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bulkjob_id' in local_var_params:
            path_params['bulkjobId'] = local_var_params['bulkjob_id']  # noqa: E501

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kg/enhance_endpoint/bulk/{bulkjobId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkjobStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enhance_bulkjob(self, **kwargs):  # noqa: E501
        """Bulk Enhance Endpoint  # noqa: E501

        Enhance endpoint to find person or organization using partial data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enhance_bulkjob(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Diffbot Token
        :param list[str] tag: Tag
        :param str mode: `mode=refresh` indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data.
        :param str non_canonical_facts: `nonCanonicalFacts=true` returns non-canonical facts.
        :param str jsonmode: `jsonmode=extended` returns origin information for facts.
        :param str rocket_reach_token: rocketReach token
        :param str webhookurl: Webhook URL
        :param str x_diffbot_request_id: Request UUID for tracking. If available, will be set on response.
        :param list[object] request_body: Bulk query payload
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BulkjobAccepted
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.enhance_bulkjob_with_http_info(**kwargs)  # noqa: E501

    def enhance_bulkjob_with_http_info(self, **kwargs):  # noqa: E501
        """Bulk Enhance Endpoint  # noqa: E501

        Enhance endpoint to find person or organization using partial data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enhance_bulkjob_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Diffbot Token
        :param list[str] tag: Tag
        :param str mode: `mode=refresh` indicates that Diffbot will attempt to recrawl all the origins of the identified entity and reconstruct the returned entity from this refreshed data.
        :param str non_canonical_facts: `nonCanonicalFacts=true` returns non-canonical facts.
        :param str jsonmode: `jsonmode=extended` returns origin information for facts.
        :param str rocket_reach_token: rocketReach token
        :param str webhookurl: Webhook URL
        :param str x_diffbot_request_id: Request UUID for tracking. If available, will be set on response.
        :param list[object] request_body: Bulk query payload
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BulkjobAccepted, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['token', 'tag', 'mode', 'non_canonical_facts', 'jsonmode', 'rocket_reach_token', 'webhookurl', 'x_diffbot_request_id', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enhance_bulkjob" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501
        if 'tag' in local_var_params and local_var_params['tag'] is not None:  # noqa: E501
            query_params.append(('tag', local_var_params['tag']))  # noqa: E501
            collection_formats['tag'] = 'multi'  # noqa: E501
        if 'mode' in local_var_params and local_var_params['mode'] is not None:  # noqa: E501
            query_params.append(('mode', local_var_params['mode']))  # noqa: E501
        if 'non_canonical_facts' in local_var_params and local_var_params['non_canonical_facts'] is not None:  # noqa: E501
            query_params.append(('nonCanonicalFacts', local_var_params['non_canonical_facts']))  # noqa: E501
        if 'jsonmode' in local_var_params and local_var_params['jsonmode'] is not None:  # noqa: E501
            query_params.append(('jsonmode', local_var_params['jsonmode']))  # noqa: E501
        if 'rocket_reach_token' in local_var_params and local_var_params['rocket_reach_token'] is not None:  # noqa: E501
            query_params.append(('rocketReachToken', local_var_params['rocket_reach_token']))  # noqa: E501
        if 'webhookurl' in local_var_params and local_var_params['webhookurl'] is not None:  # noqa: E501
            query_params.append(('webhookurl', local_var_params['webhookurl']))  # noqa: E501

        header_params = {}
        if 'x_diffbot_request_id' in local_var_params:
            header_params['X-Diffbot-RequestId'] = local_var_params['x_diffbot_request_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kg/enhance_endpoint/bulk', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkjobAccepted',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def poll_bulkjob(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulk Enhance Poll Endpoint  # noqa: E501

        Poll a bulk Enhance job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poll_bulkjob(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param str csvmode: Return results as csv
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.poll_bulkjob_with_http_info(bulkjob_id, **kwargs)  # noqa: E501

    def poll_bulkjob_with_http_info(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulk Enhance Poll Endpoint  # noqa: E501

        Poll a bulk Enhance job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poll_bulkjob_with_http_info(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param str csvmode: Return results as csv
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bulkjob_id', 'token', 'csvmode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method poll_bulkjob" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bulkjob_id' is set
        if self.api_client.client_side_validation and ('bulkjob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bulkjob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bulkjob_id` when calling `poll_bulkjob`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bulkjob_id' in local_var_params:
            path_params['bulkjobId'] = local_var_params['bulkjob_id']  # noqa: E501

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501
        if 'csvmode' in local_var_params and local_var_params['csvmode'] is not None:  # noqa: E501
            query_params.append(('csvmode', local_var_params['csvmode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kg/enhance_endpoint/bulk/{bulkjobId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_bulkjob(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulkjob stop  # noqa: E501

        Stop an incomplete job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_bulkjob(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BulkjobRecoveryStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.stop_bulkjob_with_http_info(bulkjob_id, **kwargs)  # noqa: E501

    def stop_bulkjob_with_http_info(self, bulkjob_id, **kwargs):  # noqa: E501
        """Bulkjob stop  # noqa: E501

        Stop an incomplete job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_bulkjob_with_http_info(bulkjob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bulkjob_id: Bulkjob Id (required)
        :param str token: Diffbot Token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BulkjobRecoveryStatusResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bulkjob_id', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_bulkjob" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bulkjob_id' is set
        if self.api_client.client_side_validation and ('bulkjob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bulkjob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bulkjob_id` when calling `stop_bulkjob`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bulkjob_id' in local_var_params:
            path_params['bulkjobId'] = local_var_params['bulkjob_id']  # noqa: E501

        query_params = []
        if 'token' in local_var_params and local_var_params['token'] is not None:  # noqa: E501
            query_params.append(('token', local_var_params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/kg/enhance_endpoint/bulk/{bulkjobId}/stop', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkjobRecoveryStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
